// This file is autogenerated from https://github.com/immesys/bw2_pid/blob/master/allocations.yaml
#ifndef __BW_ALLOCATIONS_H__
#define __BW_ALLOCATIONS_H__


namespace bwpo
{
  /**
   * Binary (0.0.0.0/4): Binary protocols 
   * This is a superclass for classes that are generally unreadable in their plain
   * form and require translation.
   */
  namespace num    { const constexpr int   Binary = 0; }
  namespace df     { const constexpr char* Binary = "0.0.0.0"; }
  namespace mask   { const constexpr int   Binary = 4; }
  namespace dfmask { const constexpr char* Binary = "0.0.0.0/4"; }

  /**
   * Text (64.0.0.0/4): Human readable text 
   * This is a superclass for classes that are moderately understandable if they
   * are read directly in their binary form. Generally these are protocols that
   * were designed specifically to be human readable.
   */
  namespace num    { const constexpr int   Text = 1073741824; }
  namespace df     { const constexpr char* Text = "64.0.0.0"; }
  namespace mask   { const constexpr int   Text = 4; }
  namespace dfmask { const constexpr char* Text = "64.0.0.0/4"; }

  /**
   * Blob (1.0.0.0/8): Blob 
   * This is a class for schemas that do not use a public encoding format. In
   * general it should be avoided. Schemas below this should include the key
   * "readme" with a url to a description of the schema that is sufficiently
   * detailed to allow for a developer to reverse engineer the protocol if
   * required.
   */
  namespace num    { const constexpr int   Blob = 16777216; }
  namespace df     { const constexpr char* Blob = "1.0.0.0"; }
  namespace mask   { const constexpr int   Blob = 8; }
  namespace dfmask { const constexpr char* Blob = "1.0.0.0/8"; }

  /**
   * MsgPack (2.0.0.0/8): MsgPack 
   * This class is for schemas that are represented in MsgPack
   */
  namespace num    { const constexpr int   MsgPack = 33554432; }
  namespace df     { const constexpr char* MsgPack = "2.0.0.0"; }
  namespace mask   { const constexpr int   MsgPack = 8; }
  namespace dfmask { const constexpr char* MsgPack = "2.0.0.0/8"; }

  /**
   * CapnP (3.0.0.0/8): Captain Proto 
   * This class is for captain proto interfaces. Schemas below this should include
   * the key "schema" with a url to their .capnp file
   */
  namespace num    { const constexpr int   CapnP = 50331648; }
  namespace df     { const constexpr char* CapnP = "3.0.0.0"; }
  namespace mask   { const constexpr int   CapnP = 8; }
  namespace dfmask { const constexpr char* CapnP = "3.0.0.0/8"; }

  /**
   * JSON (65.0.0.0/8): JSON 
   * This class is for schemas that are represented in JSON
   */
  namespace num    { const constexpr int   JSON = 1090519040; }
  namespace df     { const constexpr char* JSON = "65.0.0.0"; }
  namespace mask   { const constexpr int   JSON = 8; }
  namespace dfmask { const constexpr char* JSON = "65.0.0.0/8"; }

  /**
   * XML (66.0.0.0/8): XML 
   * This class is for schemas that are represented in XML
   */
  namespace num    { const constexpr int   XML = 1107296256; }
  namespace df     { const constexpr char* XML = "66.0.0.0"; }
  namespace mask   { const constexpr int   XML = 8; }
  namespace dfmask { const constexpr char* XML = "66.0.0.0/8"; }

  /**
   * YAML (67.0.0.0/8): YAML 
   * This class is for schemas that are represented in YAML
   */
  namespace num    { const constexpr int   YAML = 1124073472; }
  namespace df     { const constexpr char* YAML = "67.0.0.0"; }
  namespace mask   { const constexpr int   YAML = 8; }
  namespace dfmask { const constexpr char* YAML = "67.0.0.0/8"; }

  /**
   * BWRoutingObject (0.0.0.0/24): Bosswave Routing Object 
   * This class and schema block is reserved for bosswave routing objects
   * represented using the full PID.
   */
  namespace num    { const constexpr int   BWRoutingObject = 0; }
  namespace df     { const constexpr char* BWRoutingObject = "0.0.0.0"; }
  namespace mask   { const constexpr int   BWRoutingObject = 24; }
  namespace dfmask { const constexpr char* BWRoutingObject = "0.0.0.0/24"; }

  /**
   * LogDict (2.0.1.0/24): LogDict 
   * This class is for log messages encoded in msgpack
   */
  namespace num    { const constexpr int   LogDict = 33554688; }
  namespace df     { const constexpr char* LogDict = "2.0.1.0"; }
  namespace mask   { const constexpr int   LogDict = 24; }
  namespace dfmask { const constexpr char* LogDict = "2.0.1.0/24"; }

  /**
   * TSTaggedMP (2.0.3.0/24): TSTaggedMP 
   * This superclass describes "ts"->int64 tagged msgpack objects. The timestamp
   * is used for merging entries and determining which is later and should be the
   * final value.
   */
  namespace num    { const constexpr int   TSTaggedMP = 33555200; }
  namespace df     { const constexpr char* TSTaggedMP = "2.0.3.0"; }
  namespace mask   { const constexpr int   TSTaggedMP = 24; }
  namespace dfmask { const constexpr char* TSTaggedMP = "2.0.3.0/24"; }

  /**
   * HamiltonBase (2.0.4.0/24): Hamilton Messages 
   * This is the base class for messages used with the Hamilton motes. The only
   * key guaranteed is "#" that contains a uint16 representation of the serial of
   * the mote the message is destined for or originated from.
   */
  namespace num    { const constexpr int   HamiltonBase = 33555456; }
  namespace df     { const constexpr char* HamiltonBase = "2.0.4.0"; }
  namespace mask   { const constexpr int   HamiltonBase = 24; }
  namespace dfmask { const constexpr char* HamiltonBase = "2.0.4.0/24"; }

  /**
   * BW2ChatMessages (2.0.7.0/24): BW2ChatMessages 
   * These are MsgPack dictionaries sent for the BW2Chat program
   * (https://github.com/gtfierro/bw2chat)
   */
  namespace num    { const constexpr int   BW2ChatMessages = 33556224; }
  namespace df     { const constexpr char* BW2ChatMessages = "2.0.7.0"; }
  namespace mask   { const constexpr int   BW2ChatMessages = 24; }
  namespace dfmask { const constexpr char* BW2ChatMessages = "2.0.7.0/24"; }

  /**
   * HamiltonTelemetry (2.0.4.64/26): Hamilton Telemetry 
   * This object contains a "#" field for the serial number, as well as possibly
   * containing an "A" field with a list of X, Y, and Z accelerometer values. A
   * "T" field containing the temperature as an integer in degrees C multiplied by
   * 10000, and an "L" field containing the illumination in Lux.
   */
  namespace num    { const constexpr int   HamiltonTelemetry = 33555520; }
  namespace df     { const constexpr char* HamiltonTelemetry = "2.0.4.64"; }
  namespace mask   { const constexpr int   HamiltonTelemetry = 26; }
  namespace dfmask { const constexpr char* HamiltonTelemetry = "2.0.4.64/26"; }

  /**
   * ROAccessDChainHash (0.0.0.1/32): Access DChain hash 
   * An access dchain hash
   */
  namespace num    { const constexpr int   ROAccessDChainHash = 1; }
  namespace df     { const constexpr char* ROAccessDChainHash = "0.0.0.1"; }
  namespace mask   { const constexpr int   ROAccessDChainHash = 32; }
  namespace dfmask { const constexpr char* ROAccessDChainHash = "0.0.0.1/32"; }

  /**
   * ROAccessDChain (0.0.0.2/32): Access DChain 
   * An access dchain
   */
  namespace num    { const constexpr int   ROAccessDChain = 2; }
  namespace df     { const constexpr char* ROAccessDChain = "0.0.0.2"; }
  namespace mask   { const constexpr int   ROAccessDChain = 32; }
  namespace dfmask { const constexpr char* ROAccessDChain = "0.0.0.2/32"; }

  /**
   * ROPermissionDChainHash (0.0.0.17/32): Permission DChain hash 
   * A permission dchain hash
   */
  namespace num    { const constexpr int   ROPermissionDChainHash = 17; }
  namespace df     { const constexpr char* ROPermissionDChainHash = "0.0.0.17"; }
  namespace mask   { const constexpr int   ROPermissionDChainHash = 32; }
  namespace dfmask { const constexpr char* ROPermissionDChainHash = "0.0.0.17/32"; }

  /**
   * ROPermissionDChain (0.0.0.18/32): Permission DChain 
   * A permission dchain
   */
  namespace num    { const constexpr int   ROPermissionDChain = 18; }
  namespace df     { const constexpr char* ROPermissionDChain = "0.0.0.18"; }
  namespace mask   { const constexpr int   ROPermissionDChain = 32; }
  namespace dfmask { const constexpr char* ROPermissionDChain = "0.0.0.18/32"; }

  /**
   * ROAccessDOT (0.0.0.32/32): Access DOT 
   * An access DOT
   */
  namespace num    { const constexpr int   ROAccessDOT = 32; }
  namespace df     { const constexpr char* ROAccessDOT = "0.0.0.32"; }
  namespace mask   { const constexpr int   ROAccessDOT = 32; }
  namespace dfmask { const constexpr char* ROAccessDOT = "0.0.0.32/32"; }

  /**
   * ROPermissionDOT (0.0.0.33/32): Permission DOT 
   * A permission DOT
   */
  namespace num    { const constexpr int   ROPermissionDOT = 33; }
  namespace df     { const constexpr char* ROPermissionDOT = "0.0.0.33"; }
  namespace mask   { const constexpr int   ROPermissionDOT = 32; }
  namespace dfmask { const constexpr char* ROPermissionDOT = "0.0.0.33/32"; }

  /**
   * ROEntity (0.0.0.48/32): Entity 
   * An entity
   */
  namespace num    { const constexpr int   ROEntity = 48; }
  namespace df     { const constexpr char* ROEntity = "0.0.0.48"; }
  namespace mask   { const constexpr int   ROEntity = 32; }
  namespace dfmask { const constexpr char* ROEntity = "0.0.0.48/32"; }

  /**
   * ROOriginVK (0.0.0.49/32): Origin verifying key 
   * The origin VK of a message that does not contain a PAC
   */
  namespace num    { const constexpr int   ROOriginVK = 49; }
  namespace df     { const constexpr char* ROOriginVK = "0.0.0.49"; }
  namespace mask   { const constexpr int   ROOriginVK = 32; }
  namespace dfmask { const constexpr char* ROOriginVK = "0.0.0.49/32"; }

  /**
   * ROEntityWKey (0.0.0.50/32): Entity with signing key 
   * An entity with signing key
   */
  namespace num    { const constexpr int   ROEntityWKey = 50; }
  namespace df     { const constexpr char* ROEntityWKey = "0.0.0.50"; }
  namespace mask   { const constexpr int   ROEntityWKey = 32; }
  namespace dfmask { const constexpr char* ROEntityWKey = "0.0.0.50/32"; }

  /**
   * RODRVK (0.0.0.51/32): Designated router verifying key 
   * a 32 byte designated router verifying key
   */
  namespace num    { const constexpr int   RODRVK = 51; }
  namespace df     { const constexpr char* RODRVK = "0.0.0.51"; }
  namespace mask   { const constexpr int   RODRVK = 32; }
  namespace dfmask { const constexpr char* RODRVK = "0.0.0.51/32"; }

  /**
   * ROExpiry (0.0.0.64/32): Expiry 
   * Sets an expiry for the message
   */
  namespace num    { const constexpr int   ROExpiry = 64; }
  namespace df     { const constexpr char* ROExpiry = "0.0.0.64"; }
  namespace mask   { const constexpr int   ROExpiry = 32; }
  namespace dfmask { const constexpr char* ROExpiry = "0.0.0.64/32"; }

  /**
   * RORevocation (0.0.0.80/32): Revocation 
   * A revocation for an Entity or a DOT
   */
  namespace num    { const constexpr int   RORevocation = 80; }
  namespace df     { const constexpr char* RORevocation = "0.0.0.80"; }
  namespace mask   { const constexpr int   RORevocation = 32; }
  namespace dfmask { const constexpr char* RORevocation = "0.0.0.80/32"; }

  /**
   * BinaryActuation (1.0.1.0/32): Binary actuation 
   * This payload object is one byte long, 0x00 for off, 0x01 for on.
   */
  namespace num    { const constexpr int   BinaryActuation = 16777472; }
  namespace df     { const constexpr char* BinaryActuation = "1.0.1.0"; }
  namespace mask   { const constexpr int   BinaryActuation = 32; }
  namespace dfmask { const constexpr char* BinaryActuation = "1.0.1.0/32"; }

  /**
   * BWMessage (1.0.1.1/32): Packed Bosswave Message 
   * This object contains an entire signed and encoded bosswave message
   */
  namespace num    { const constexpr int   BWMessage = 16777473; }
  namespace df     { const constexpr char* BWMessage = "1.0.1.1"; }
  namespace mask   { const constexpr int   BWMessage = 32; }
  namespace dfmask { const constexpr char* BWMessage = "1.0.1.1/32"; }

  /**
   * Double (1.0.2.0/32): Double 
   * This payload is an 8 byte long IEEE 754 double floating point value encoded
   * in little endian. This should only be used if the semantic meaning is obvious
   * in the context, otherwise a PID with a more specific semantic meaning should
   * be used.
   */
  namespace num    { const constexpr int   Double = 16777728; }
  namespace df     { const constexpr char* Double = "1.0.2.0"; }
  namespace mask   { const constexpr int   Double = 32; }
  namespace dfmask { const constexpr char* Double = "1.0.2.0/32"; }

  /**
   * Wavelet (1.0.6.1/32): Wavelet binary 
   * This object contains a BOSSWAVE Wavelet
   */
  namespace num    { const constexpr int   Wavelet = 16778753; }
  namespace df     { const constexpr char* Wavelet = "1.0.6.1"; }
  namespace mask   { const constexpr int   Wavelet = 32; }
  namespace dfmask { const constexpr char* Wavelet = "1.0.6.1/32"; }

  /**
   * SpawnpointLog (2.0.2.0/32): Spawnpoint stdout 
   * This contains stdout data from a spawnpoint container. It is a msgpacked
   * dictionary that contains a "service" key, a "time" key (unix nano timestamp)
   * and a "contents" key and a "spalias" key.
   */
  namespace num    { const constexpr int   SpawnpointLog = 33554944; }
  namespace df     { const constexpr char* SpawnpointLog = "2.0.2.0"; }
  namespace mask   { const constexpr int   SpawnpointLog = 32; }
  namespace dfmask { const constexpr char* SpawnpointLog = "2.0.2.0/32"; }

  /**
   * SpawnpointHeartbeat (2.0.2.1/32): SpawnPoint heartbeat 
   * A heartbeat message from spawnpoint. It is a msgpack dictionary that contains
   * the keys "Alias", "Time", "TotalMem", "TotalCpuShares", "AvailableMem", and
   * "AvailableCpuShares".
   */
  namespace num    { const constexpr int   SpawnpointHeartbeat = 33554945; }
  namespace df     { const constexpr char* SpawnpointHeartbeat = "2.0.2.1"; }
  namespace mask   { const constexpr int   SpawnpointHeartbeat = 32; }
  namespace dfmask { const constexpr char* SpawnpointHeartbeat = "2.0.2.1/32"; }

  /**
   * SMetadata (2.0.3.1/32): Simple Metadata entry 
   * This contains a simple "val" string and "ts" int64 metadata entry. The key is
   * determined by the URI. Other information MAY be present in the msgpacked
   * object. The timestamp is used for merging metadata entries.
   */
  namespace num    { const constexpr int   SMetadata = 33555201; }
  namespace df     { const constexpr char* SMetadata = "2.0.3.1"; }
  namespace mask   { const constexpr int   SMetadata = 32; }
  namespace dfmask { const constexpr char* SMetadata = "2.0.3.1/32"; }

  /**
   * HSBLightMessage (2.0.5.1/32): HSBLight Message 
   * This object may contain "hue", "saturation", "brightness" fields with a float
   * from 0 to 1. It may also contain an "state" key with a boolean. Omitting
   * fields leaves them at their previous state.
   */
  namespace num    { const constexpr int   HSBLightMessage = 33555713; }
  namespace df     { const constexpr char* HSBLightMessage = "2.0.5.1"; }
  namespace mask   { const constexpr int   HSBLightMessage = 32; }
  namespace dfmask { const constexpr char* HSBLightMessage = "2.0.5.1/32"; }

  /**
   * InterfaceDescriptor (2.0.6.1/32): InterfaceDescriptor 
   * This object is used to describe an interface. It contains "uri",
   * "iface","svc","namespace" "prefix" and "metadata" keys.
   */
  namespace num    { const constexpr int   InterfaceDescriptor = 33555969; }
  namespace df     { const constexpr char* InterfaceDescriptor = "2.0.6.1"; }
  namespace mask   { const constexpr int   InterfaceDescriptor = 32; }
  namespace dfmask { const constexpr char* InterfaceDescriptor = "2.0.6.1/32"; }

  /**
   * BW2Chat_CreateRoomMessage (2.0.7.1/32): BW2Chat_CreateRoomMessage 
   * A dictionary with a single key "Name" indicating the room to be created. This
   * will likely be deprecated.
   */
  namespace num    { const constexpr int   BW2Chat_CreateRoomMessage = 33556225; }
  namespace df     { const constexpr char* BW2Chat_CreateRoomMessage = "2.0.7.1"; }
  namespace mask   { const constexpr int   BW2Chat_CreateRoomMessage = 32; }
  namespace dfmask { const constexpr char* BW2Chat_CreateRoomMessage = "2.0.7.1/32"; }

  /**
   * BW2Chat_ChatMessage (2.0.7.2/32): BW2Chat_ChatMessage 
   * A textual message to be sent to all members of a chatroom. This is a
   * dictionary with three keys: 'Room', the name of the room to publish to (this
   * is actually implicit in the publishing), 'From', the alias you are using for
   * the chatroom, and 'Message', the actual string to be displayed to all users
   * in the room.
   */
  namespace num    { const constexpr int   BW2Chat_ChatMessage = 33556226; }
  namespace df     { const constexpr char* BW2Chat_ChatMessage = "2.0.7.2"; }
  namespace mask   { const constexpr int   BW2Chat_ChatMessage = 32; }
  namespace dfmask { const constexpr char* BW2Chat_ChatMessage = "2.0.7.2/32"; }

  /**
   * BW2Chat_JoinRoom (2.0.7.3/32): BW2Chat_JoinRoom 
   * Notify users in the chatroom that you have joined. Dictionary with a single
   * key "Alias" that has a value of your nickname
   */
  namespace num    { const constexpr int   BW2Chat_JoinRoom = 33556227; }
  namespace df     { const constexpr char* BW2Chat_JoinRoom = "2.0.7.3"; }
  namespace mask   { const constexpr int   BW2Chat_JoinRoom = 32; }
  namespace dfmask { const constexpr char* BW2Chat_JoinRoom = "2.0.7.3/32"; }

  /**
   * BW2Chat_LeaveRoom (2.0.7.4/32): BW2Chat_LeaveRoom 
   * Notify users in the chatroom that you have left. Dictionary with a single key
   * "Alias" that has a value of your nickname
   */
  namespace num    { const constexpr int   BW2Chat_LeaveRoom = 33556228; }
  namespace df     { const constexpr char* BW2Chat_LeaveRoom = "2.0.7.4"; }
  namespace mask   { const constexpr int   BW2Chat_LeaveRoom = 32; }
  namespace dfmask { const constexpr char* BW2Chat_LeaveRoom = "2.0.7.4/32"; }

  /**
   * String (64.0.1.0/32): String 
   * A plain string with no rigid semantic meaning. This can be thought of as a
   * print statement. Anything that has semantic meaning like a process log should
   * use a different schema.
   */
  namespace num    { const constexpr int   String = 1073742080; }
  namespace df     { const constexpr char* String = "64.0.1.0"; }
  namespace mask   { const constexpr int   String = 32; }
  namespace dfmask { const constexpr char* String = "64.0.1.0/32"; }

  /**
   * FMDIntentString (64.0.1.1/32): FMD Intent String 
   * A plain string used as an intent for the follow-me display service.
   */
  namespace num    { const constexpr int   FMDIntentString = 1073742081; }
  namespace df     { const constexpr char* FMDIntentString = "64.0.1.1"; }
  namespace mask   { const constexpr int   FMDIntentString = 32; }
  namespace dfmask { const constexpr char* FMDIntentString = "64.0.1.1/32"; }

  /**
   * AccountBalance (64.0.1.2/32): Account balance 
   * A comma seperated representation of an account and its balance as
   * addr,decimal,human_readable. For example
   * 0x49b1d037c33fdaad75d2532cd373fb5db87cc94c,57203431159181996982272,57203.4311
   * Ether  . Be careful in that the decimal representation will frequently be
   * bigger than an int64.
   */
  namespace num    { const constexpr int   AccountBalance = 1073742082; }
  namespace df     { const constexpr char* AccountBalance = "64.0.1.2"; }
  namespace mask   { const constexpr int   AccountBalance = 32; }
  namespace dfmask { const constexpr char* AccountBalance = "64.0.1.2/32"; }

  /**
   * SpawnpointConfig (67.0.2.0/32): SpawnPoint config 
   * A configuration file for SpawnPoint (github.com/immesys/spawnpoint)
   */
  namespace num    { const constexpr int   SpawnpointConfig = 1124073984; }
  namespace df     { const constexpr char* SpawnpointConfig = "67.0.2.0"; }
  namespace mask   { const constexpr int   SpawnpointConfig = 32; }
  namespace dfmask { const constexpr char* SpawnpointConfig = "67.0.2.0/32"; }

} // end pid
#endif

