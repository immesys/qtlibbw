#!/usr/bin/env python
#hopefully this works on python2 and python3
from __future__ import print_function
import requests
import yaml #this is pyaml on pip
import sys
import os
import os.path
import textwrap

rq = requests.get("https://raw.githubusercontent.com/immesys/bw2_pid/master/allocations.yaml")
if rq.status_code != 200:
    print ("Could not obtain allocations file from GitHub")
    sys.exit(1)

doc = yaml.load(rq.text)
def parsedot(s):
    i = s.split(".")
    return (int(i[0])<<24) + (int(i[1])<<16) + (int(i[2]) << 8) + int(i[3])
subnets = sorted([(int(k.split("/")[1]), parsedot(k.split("/")[0]), k ) for k in doc.keys()])

def gen_cpp(subnets, doc):
    curpath=os.path.realpath(__file__)
    package = curpath.split("/")[-2]
    of = open("allocations.h","w")
    print("// This file is autogenerated from https://github.com/immesys/bw2_pid/blob/master/allocations.yaml", file=of)
    print("#ifndef __BW_ALLOCATIONS_H__", file=of)
    print("#define __BW_ALLOCATIONS_H__\n\n", file=of)
    # first do ponum
    print("namespace bwpo\n{", file=of)

    #print("  namespace num\n  {", file=of)
    for i in subnets:
        d = doc[i[2]]
        print("  /**\n   * %s (%s): %s " %(d["sym"], i[2], d["short"]), file=of)
        print("   * "+"\n   * ".join(textwrap.wrap(d["desc"], 77))+"\n   */", file=of)
        print("  namespace num    { const constexpr int   %s = %d; }" % (d["sym"], i[1]), file=of)
        print("  namespace df     { const constexpr char* %s = \"%s\"; }"  % (d["sym"], i[2].split("/")[0]), file=of)
        print("  namespace mask   { const constexpr int   %s = %d; }" % (d["sym"], i[0]), file=of)
        print("  namespace dfmask { const constexpr char* %s = \"%s\"; }"  % (d["sym"], i[2]), file=of)
        print("", file=of)
    print("} // end pid", file=of)
    print("#endif\n",file=of)
    of.close()


gen_cpp(subnets, doc)
